!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/white/projects/dmenu-desktop/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
CALL_F_IF_NOT_NULL	libzatar.h	/^#define CALL_F_IF_NOT_NULL(/;"	d
CHAR2_TO_INT	libzatar.h	/^#define CHAR2_TO_INT(/;"	d
CTRL_KEY	libzatar.h	/^#define CTRL_KEY(/;"	d
DesktopFile	main.c	/^} DesktopFile;$/;"	t	typeref:struct:__anon0d38083b0108	file:
INSTALL_PATH	build.c	/^#define INSTALL_PATH /;"	d	file:
LIBZATAR_H	libzatar.h	/^#define LIBZATAR_H$/;"	d
LIBZATAR_IMPLEMENTATION	build.c	/^#define LIBZATAR_IMPLEMENTATION$/;"	d	file:
LIBZATAR_IMPLEMENTATION	main.c	/^#define LIBZATAR_IMPLEMENTATION$/;"	d	file:
PATH_MAX	libzatar.h	/^#define PATH_MAX /;"	d
TARGET	build.c	/^#define TARGET /;"	d	file:
Z_AVL_DECLARE	libzatar.h	/^#define Z_AVL_DECLARE(/;"	d
Z_AVL_IMPLEMENT	libzatar.h	/^#define Z_AVL_IMPLEMENT(/;"	d
Z_COLOR_BLUE	libzatar.h	/^#define Z_COLOR_BLUE /;"	d
Z_COLOR_BOLD_BLUE	libzatar.h	/^#define Z_COLOR_BOLD_BLUE /;"	d
Z_COLOR_BOLD_CYAN	libzatar.h	/^#define Z_COLOR_BOLD_CYAN /;"	d
Z_COLOR_BOLD_GRAY	libzatar.h	/^#define Z_COLOR_BOLD_GRAY /;"	d
Z_COLOR_BOLD_GREEN	libzatar.h	/^#define Z_COLOR_BOLD_GREEN /;"	d
Z_COLOR_BOLD_MAGENTA	libzatar.h	/^#define Z_COLOR_BOLD_MAGENTA /;"	d
Z_COLOR_BOLD_RED	libzatar.h	/^#define Z_COLOR_BOLD_RED /;"	d
Z_COLOR_BOLD_WHITE	libzatar.h	/^#define Z_COLOR_BOLD_WHITE /;"	d
Z_COLOR_BOLD_YELLOW	libzatar.h	/^#define Z_COLOR_BOLD_YELLOW /;"	d
Z_COLOR_CYAN	libzatar.h	/^#define Z_COLOR_CYAN /;"	d
Z_COLOR_GRAY	libzatar.h	/^#define Z_COLOR_GRAY /;"	d
Z_COLOR_GREEN	libzatar.h	/^#define Z_COLOR_GREEN /;"	d
Z_COLOR_MAGENTA	libzatar.h	/^#define Z_COLOR_MAGENTA /;"	d
Z_COLOR_RED	libzatar.h	/^#define Z_COLOR_RED /;"	d
Z_COLOR_RESET	libzatar.h	/^#define Z_COLOR_RESET /;"	d
Z_COLOR_WHITE	libzatar.h	/^#define Z_COLOR_WHITE /;"	d
Z_COLOR_YELLOW	libzatar.h	/^#define Z_COLOR_YELLOW /;"	d
Z_CURSOR_STYLE	libzatar.h	/^} Z_CURSOR_STYLE;$/;"	t	typeref:enum:__anonbc5080340203
Z_CURSOR_STYLE_BEAM_BLINKING	libzatar.h	/^    Z_CURSOR_STYLE_BEAM_BLINKING      = 5,$/;"	e	enum:__anonbc5080340203
Z_CURSOR_STYLE_BEAM_STEADY	libzatar.h	/^    Z_CURSOR_STYLE_BEAM_STEADY        = 6,$/;"	e	enum:__anonbc5080340203
Z_CURSOR_STYLE_BLOCK_BLINKING	libzatar.h	/^    Z_CURSOR_STYLE_BLOCK_BLINKING     = 1,$/;"	e	enum:__anonbc5080340203
Z_CURSOR_STYLE_BLOCK_STEADY	libzatar.h	/^    Z_CURSOR_STYLE_BLOCK_STEADY       = 0,$/;"	e	enum:__anonbc5080340203
Z_CURSOR_STYLE_UNDERLINE_BLINKING	libzatar.h	/^    Z_CURSOR_STYLE_UNDERLINE_BLINKING = 3,$/;"	e	enum:__anonbc5080340203
Z_CURSOR_STYLE_UNDERLINE_STEADY	libzatar.h	/^    Z_CURSOR_STYLE_UNDERLINE_STEADY   = 4,$/;"	e	enum:__anonbc5080340203
Z_Cmd	libzatar.h	/^} Z_Cmd;$/;"	t	typeref:struct:__anonbc5080340508
Z_DEFAULT_GROWTH_RATE	libzatar.h	/^#define Z_DEFAULT_GROWTH_RATE /;"	d
Z_Err	libzatar.h	/^typedef enum { Z_Ok, Z_Err } Z_Result;$/;"	e	enum:__anonbc5080340103
Z_KEY_ARROW_DOWN	libzatar.h	/^#define Z_KEY_ARROW_DOWN /;"	d
Z_KEY_ARROW_LEFT	libzatar.h	/^#define Z_KEY_ARROW_LEFT /;"	d
Z_KEY_ARROW_RIGHT	libzatar.h	/^#define Z_KEY_ARROW_RIGHT /;"	d
Z_KEY_ARROW_UP	libzatar.h	/^#define Z_KEY_ARROW_UP /;"	d
Z_KEY_DELETE	libzatar.h	/^#define Z_KEY_DELETE /;"	d
Z_KEY_EMPTY	libzatar.h	/^#define Z_KEY_EMPTY /;"	d
Z_KEY_END	libzatar.h	/^#define Z_KEY_END /;"	d
Z_KEY_HOME	libzatar.h	/^#define Z_KEY_HOME /;"	d
Z_KEY_PAGE_DOWN	libzatar.h	/^#define Z_KEY_PAGE_DOWN /;"	d
Z_KEY_PAGE_UP	libzatar.h	/^#define Z_KEY_PAGE_UP /;"	d
Z_MAP_DECLARE	libzatar.h	/^#define Z_MAP_DECLARE(/;"	d
Z_MAP_IMPLEMENT	libzatar.h	/^#define Z_MAP_IMPLEMENT(/;"	d
Z_MAT_AT	libzatar.h	/^#define Z_MAT_AT(/;"	d
Z_MAT_DECLARE	libzatar.h	/^#define Z_MAT_DECLARE(/;"	d
Z_MAT_FREE	libzatar.h	/^#define Z_MAT_FREE(/;"	d
Z_MAT_INIT	libzatar.h	/^#define Z_MAT_INIT(/;"	d
Z_Ok	libzatar.h	/^typedef enum { Z_Ok, Z_Err } Z_Result;$/;"	e	enum:__anonbc5080340103
Z_Pipe_Mode	libzatar.h	/^} Z_Pipe_Mode;$/;"	t	typeref:enum:__anonbc5080340403
Z_Pipe_Mode_Read	libzatar.h	/^    Z_Pipe_Mode_Read = 0,$/;"	e	enum:__anonbc5080340403
Z_Pipe_Mode_Write	libzatar.h	/^    Z_Pipe_Mode_Write = 1,$/;"	e	enum:__anonbc5080340403
Z_Result	libzatar.h	/^typedef enum { Z_Ok, Z_Err } Z_Result;$/;"	t	typeref:enum:__anonbc5080340103
Z_Str	libzatar.h	/^} Z_Str;$/;"	t	typeref:struct:__anonbc5080340308
Z_Str_Slice	libzatar.h	/^typedef Z_Str Z_Str_Slice;$/;"	t	typeref:typename:Z_Str
Z_VECTOR_DECLARE	libzatar.h	/^#define Z_VECTOR_DECLARE(/;"	d
Z_VECTOR_IMPLEMENT	libzatar.h	/^#define Z_VECTOR_IMPLEMENT(/;"	d
__anon0d38083b0108	main.c	/^typedef struct {$/;"	s	file:
__anonbc5080340103	libzatar.h	/^typedef enum { Z_Ok, Z_Err } Z_Result;$/;"	g
__anonbc5080340203	libzatar.h	/^typedef enum {$/;"	g
__anonbc5080340308	libzatar.h	/^typedef struct {$/;"	s
__anonbc5080340403	libzatar.h	/^typedef enum {$/;"	g
__anonbc5080340508	libzatar.h	/^typedef struct {$/;"	s
_z_cmd_append	libzatar.h	/^void _z_cmd_append(Z_Cmd *cmd, ...)$/;"	f	typeref:typename:void
_z_run_async	libzatar.h	/^int _z_run_async(const char *arg, ...)$/;"	f	typeref:typename:int
_z_should_rebuild	libzatar.h	/^bool _z_should_rebuild(const char *target, ...)$/;"	f	typeref:typename:bool
build	build.c	/^int build()$/;"	f	typeref:typename:int
capacity	libzatar.h	/^    int capacity;$/;"	m	struct:__anonbc5080340308	typeref:typename:int
capacity	libzatar.h	/^    int capacity;$/;"	m	struct:__anonbc5080340508	typeref:typename:int
clean	build.c	/^int clean()$/;"	f	typeref:typename:int
die	main.c	/^void die(const char *s)$/;"	f	typeref:typename:void
excuteProgram	main.c	/^int excuteProgram(const Map *programs, Z_Str_Slice programName)$/;"	f	typeref:typename:int
exec	main.c	/^	Z_Str exec;$/;"	m	struct:__anon0d38083b0108	typeref:typename:Z_Str	file:
install	build.c	/^int install()$/;"	f	typeref:typename:int
len	libzatar.h	/^	int len;$/;"	m	struct:__anonbc5080340508	typeref:typename:int
len	libzatar.h	/^    int len;$/;"	m	struct:__anonbc5080340308	typeref:typename:int
main	build.c	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
main	main.c	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
name	main.c	/^	Z_Str name;$/;"	m	struct:__anon0d38083b0108	typeref:typename:Z_Str	file:
original_termios	libzatar.h	/^static struct termios original_termios;$/;"	v	typeref:struct:termios
parseDesktopFile	main.c	/^Z_Result parseDesktopFile(const char *pathname, DesktopFile *desktopFile)$/;"	f	typeref:typename:Z_Result
printProgramName	main.c	/^void printProgramName(Z_Str key, Z_Str data, void *arg)$/;"	f	typeref:typename:void
proccessDesktopFile	main.c	/^void proccessDesktopFile(const char *pathname, Map *programs)$/;"	f	typeref:typename:void
processDirectories	main.c	/^Map processDirectories(const char *dirs[])$/;"	f	typeref:typename:Map
processDirectory	main.c	/^void processDirectory(const char *dirPath, Map *programs)$/;"	f	typeref:typename:void
ptr	libzatar.h	/^	char **ptr;$/;"	m	struct:__anonbc5080340508	typeref:typename:char **
ptr	libzatar.h	/^    char *ptr;$/;"	m	struct:__anonbc5080340308	typeref:typename:char *
removeFieldCodes	main.c	/^void removeFieldCodes(Z_Str *s)$/;"	f	typeref:typename:void
uninstall	build.c	/^int uninstall()$/;"	f	typeref:typename:int
z_append_file	libzatar.h	/^Z_Result z_append_file(const char *fileName, const char *fmt, ...)$/;"	f	typeref:typename:Z_Result
z_clear_line	libzatar.h	/^#define z_clear_line(/;"	d
z_clear_screen	libzatar.h	/^#define z_clear_screen(/;"	d
z_cmd_append	libzatar.h	/^#define z_cmd_append(/;"	d
z_cmd_append_va	libzatar.h	/^void z_cmd_append_va(Z_Cmd *cmd, va_list ap)$/;"	f	typeref:typename:void
z_cmd_clear	libzatar.h	/^void z_cmd_clear(Z_Cmd *cmd)$/;"	f	typeref:typename:void
z_cmd_free	libzatar.h	/^void z_cmd_free(Z_Cmd *cmd)$/;"	f	typeref:typename:void
z_cmd_init	libzatar.h	/^void z_cmd_init(Z_Cmd *cmd)$/;"	f	typeref:typename:void
z_cmd_print	libzatar.h	/^void z_cmd_print(const Z_Cmd *cmd)$/;"	f	typeref:typename:void
z_cmd_print_arg	libzatar.h	/^void z_cmd_print_arg(const char *arg)$/;"	f	typeref:typename:void
z_cmd_run_async	libzatar.h	/^int z_cmd_run_async(Z_Cmd *cmd)$/;"	f	typeref:typename:int
z_compress_path	libzatar.h	/^char *z_compress_path(const char *pathname)$/;"	f	typeref:typename:char *
z_cursor_down	libzatar.h	/^#define z_cursor_down(/;"	d
z_cursor_left	libzatar.h	/^#define z_cursor_left(/;"	d
z_cursor_right	libzatar.h	/^#define z_cursor_right(/;"	d
z_cursor_up	libzatar.h	/^#define z_cursor_up(/;"	d
z_dir_traverse	libzatar.h	/^Z_Result z_dir_traverse(const char *dir, bool action(const char *))$/;"	f	typeref:typename:Z_Result
z_disable_line_wrap	libzatar.h	/^#define z_disable_line_wrap(/;"	d
z_disable_raw_mode	libzatar.h	/^Z_Result z_disable_raw_mode()$/;"	f	typeref:typename:Z_Result
z_enable_full_buffering	libzatar.h	/^Z_Result z_enable_full_buffering(FILE *fp)$/;"	f	typeref:typename:Z_Result
z_enable_raw_mode	libzatar.h	/^Z_Result z_enable_raw_mode(int vminKeys, int vtime)$/;"	f	typeref:typename:Z_Result
z_enbale_line_wrap	libzatar.h	/^#define z_enbale_line_wrap(/;"	d
z_ensure_capacity	libzatar.h	/^#define z_ensure_capacity(/;"	d
z_enter_alternative_screen	libzatar.h	/^#define z_enter_alternative_screen(/;"	d
z_exit_alternative_screen	libzatar.h	/^#define z_exit_alternative_screen(/;"	d
z_expand_path	libzatar.h	/^void z_expand_path(const char *pathname, Z_Str *output)$/;"	f	typeref:typename:void
z_get_cursor_pos	libzatar.h	/^Z_Result z_get_cursor_pos(int *x, int *y)$/;"	f	typeref:typename:Z_Result
z_get_file_size	libzatar.h	/^int z_get_file_size(FILE *fp)$/;"	f	typeref:typename:int
z_get_fmt_size	libzatar.h	/^int z_get_fmt_size(const char *fmt, ...)$/;"	f	typeref:typename:int
z_get_fmt_size_va	libzatar.h	/^int z_get_fmt_size_va(const char *fmt, va_list ap)$/;"	f	typeref:typename:int
z_get_home_path	libzatar.h	/^const char *z_get_home_path()$/;"	f	typeref:typename:const char *
z_get_path_extention	libzatar.h	/^const char *z_get_path_extention(const char *pathname)$/;"	f	typeref:typename:const char *
z_get_screen_size	libzatar.h	/^Z_Result z_get_screen_size(int *width, int *height)$/;"	f	typeref:typename:Z_Result
z_get_screen_size_by_cursor	libzatar.h	/^Z_Result z_get_screen_size_by_cursor(int *width, int *height)$/;"	f	typeref:typename:Z_Result
z_get_screen_size_by_ioctl	libzatar.h	/^Z_Result z_get_screen_size_by_ioctl(int *width, int *height)$/;"	f	typeref:typename:Z_Result
z_hide_cursor	libzatar.h	/^#define z_hide_cursor(/;"	d
z_is_dir	libzatar.h	/^bool z_is_dir(const char *pathname)$/;"	f	typeref:typename:bool
z_is_extention_equal	libzatar.h	/^bool z_is_extention_equal(const char *pathname, const char *extention)$/;"	f	typeref:typename:bool
z_is_path_exists	libzatar.h	/^bool z_is_path_exists(const char *pathname)$/;"	f	typeref:typename:bool
z_is_regular_file	libzatar.h	/^bool z_is_regular_file(const char *pathname)$/;"	f	typeref:typename:bool
z_max	libzatar.h	/^int z_max(int a, int b)$/;"	f	typeref:typename:int
z_max3	libzatar.h	/^int z_max3(int a, int b, int c)$/;"	f	typeref:typename:int
z_memdup	libzatar.h	/^void *z_memdup(const void *mem, const size_t size)$/;"	f	typeref:typename:void *
z_min	libzatar.h	/^int z_min(int a, int b)$/;"	f	typeref:typename:int
z_min3	libzatar.h	/^int z_min3(int a, int b, int c)$/;"	f	typeref:typename:int
z_mkdir	libzatar.h	/^bool z_mkdir(const char *pathname)$/;"	f	typeref:typename:bool
z_null_terminate	libzatar.h	/^#define z_null_terminate(/;"	d
z_popen2	libzatar.h	/^Z_Result z_popen2(char *pathname, char *argv[], FILE *ppipe[2])$/;"	f	typeref:typename:Z_Result
z_print_error	libzatar.h	/^#define z_print_error(/;"	d
z_print_info	libzatar.h	/^#define z_print_info(/;"	d
z_print_warning	libzatar.h	/^#define z_print_warning(/;"	d
z_read_escape_key	libzatar.h	/^int z_read_escape_key()$/;"	f	typeref:typename:int
z_read_file	libzatar.h	/^Z_Result z_read_file(const char *fileName, const char *fmt, ...)$/;"	f	typeref:typename:Z_Result
z_read_key	libzatar.h	/^int z_read_key()$/;"	f	typeref:typename:int
z_read_whole_file	libzatar.h	/^Z_Result z_read_whole_file(Z_Str *s, const char *pathname)$/;"	f	typeref:typename:Z_Result
z_rebuild_yourself	libzatar.h	/^void z_rebuild_yourself(const char *src_pathname, const char *executable_pathname)$/;"	f	typeref:typename:void
z_redirect_fd	libzatar.h	/^Z_Result z_redirect_fd(int srcFd, const char *destFileName)$/;"	f	typeref:typename:Z_Result
z_register_change_in_window_size	libzatar.h	/^Z_Result z_register_change_in_window_size(void funciton(int))$/;"	f	typeref:typename:Z_Result
z_restore_cursor_pos	libzatar.h	/^#define z_restore_cursor_pos(/;"	d
z_run_async	libzatar.h	/^#define z_run_async(/;"	d
z_save_cursor_pos	libzatar.h	/^#define z_save_cursor_pos(/;"	d
z_set_cursor_pos	libzatar.h	/^#define z_set_cursor_pos(/;"	d
z_set_cursor_style	libzatar.h	/^#define z_set_cursor_style(/;"	d
z_set_cursor_x	libzatar.h	/^#define z_set_cursor_x(/;"	d
z_should_rebuild	libzatar.h	/^#define z_should_rebuild(/;"	d
z_should_rebuild_va	libzatar.h	/^bool z_should_rebuild_va(const char *target, va_list ap)$/;"	f	typeref:typename:bool
z_show_cursor	libzatar.h	/^#define z_show_cursor(/;"	d
z_str_clear	libzatar.h	/^void z_str_clear(Z_Str *s)$/;"	f	typeref:typename:void
z_str_cmp	libzatar.h	/^int z_str_cmp(Z_Str_Slice s1, Z_Str_Slice s2)$/;"	f	typeref:typename:int
z_str_free	libzatar.h	/^void z_str_free(Z_Str s)$/;"	f	typeref:typename:void
z_str_free_ptr	libzatar.h	/^void z_str_free_ptr(Z_Str *s)$/;"	f	typeref:typename:void
z_str_get_line	libzatar.h	/^Z_Str z_str_get_line(FILE *fp)$/;"	f	typeref:typename:Z_Str
z_str_init	libzatar.h	/^void z_str_init(Z_Str *s, const char *fmt, ...)$/;"	f	typeref:typename:void
z_str_init_va	libzatar.h	/^void z_str_init_va(Z_Str *s, const char *fmt, va_list ap)$/;"	f	typeref:typename:void
z_str_is_empty	libzatar.h	/^bool z_str_is_empty(Z_Str_Slice s)$/;"	f	typeref:typename:bool
z_str_len	libzatar.h	/^int z_str_len(Z_Str_Slice s)$/;"	f	typeref:typename:int
z_str_n_cmp	libzatar.h	/^int z_str_n_cmp(Z_Str_Slice s1, Z_Str_Slice s2, int n)$/;"	f	typeref:typename:int
z_str_new	libzatar.h	/^Z_Str z_str_new(const char *fmt, ...)$/;"	f	typeref:typename:Z_Str
z_str_new_va	libzatar.h	/^Z_Str z_str_new_va(const char *fmt, va_list ap)$/;"	f	typeref:typename:Z_Str
z_str_pop_c	libzatar.h	/^char z_str_pop_c(Z_Str *s)$/;"	f	typeref:typename:char
z_str_print	libzatar.h	/^void z_str_print(Z_Str_Slice s)$/;"	f	typeref:typename:void
z_str_println	libzatar.h	/^void z_str_println(Z_Str_Slice s)$/;"	f	typeref:typename:void
z_str_push	libzatar.h	/^void z_str_push(Z_Str *s, const char *fmt, ...)$/;"	f	typeref:typename:void
z_str_push_c	libzatar.h	/^void z_str_push_c(Z_Str *s, char c)$/;"	f	typeref:typename:void
z_str_push_str	libzatar.h	/^void z_str_push_str(Z_Str *dst, const Z_Str_Slice src)$/;"	f	typeref:typename:void
z_str_push_va	libzatar.h	/^void z_str_push_va(Z_Str *s, const char *fmt, va_list ap)$/;"	f	typeref:typename:void
z_str_tok_init	libzatar.h	/^Z_Str_Slice z_str_tok_init(Z_Str_Slice s)$/;"	f	typeref:typename:Z_Str_Slice
z_str_tok_next	libzatar.h	/^Z_Result z_str_tok_next(Z_Str_Slice s, Z_Str_Slice *slice, const char *delim)$/;"	f	typeref:typename:Z_Result
z_str_top_c	libzatar.h	/^char z_str_top_c(Z_Str *s)$/;"	f	typeref:typename:char
z_swap	libzatar.h	/^void z_swap(void *a, void *b, const size_t size)$/;"	f	typeref:typename:void
z_wait_for_byte	libzatar.h	/^int z_wait_for_byte()$/;"	f	typeref:typename:int
z_write_file	libzatar.h	/^Z_Result z_write_file(const char *fileName, const char *fmt, ...)$/;"	f	typeref:typename:Z_Result
